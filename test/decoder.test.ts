import { describe, it, expect } from 'vitest';
import { MulticallDecoder } from '../src/decoder';

describe('MulticallDecoder', () => {
  it('should decode the provided multicall data', async () => {
    const decoder = new MulticallDecoder({
      verbose: true,
    });

    const multicallData = '0x82ad56cb00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000039053d51b77dc0d36036fc1fcc8cb819df8ef37a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000084c978f7ac0000000000000000000000000298e0c16097c3c2c3fc200f901ae54ae7659f9900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000beac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeebeac00000000000000000000000000000000000000000000000000000000000000000000000000000000039053d51b77dc0d36036fc1fcc8cb819df8ef37a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000084c978f7ac0000000000000000000000000298e0c16097c3c2c3fc200f901ae54ae7659f9900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000beac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeebeac00000000000000000000000000000000000000000000000000000000000000000000000000000000039053d51b77dc0d36036fc1fcc8cb819df8ef37a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000084c978f7ac0000000000000000000000000298e0c16097c3c2c3fc200f901ae54ae7659f9900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000beac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeebeac00000000000000000000000000000000000000000000000000000000000000000000000000000000039053d51b77dc0d36036fc1fcc8cb819df8ef37a00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002465da12640000000000000000000000000298e0c16097c3c2c3fc200f901ae54ae7659f9900000000000000000000000000000000000000000000000000000000';

    console.log('\n=== Starting Multicall Decoding Test ===\n');

    const decodedCalls = await decoder.decodeMulticall(multicallData);

    // Assertions
    expect(decodedCalls).toBeDefined();
    expect(Array.isArray(decodedCalls)).toBe(true);
    expect(decodedCalls.length).toBeGreaterThan(0);

    console.log('\n=== Test Results ===');
    console.log(`Total calls decoded: ${decodedCalls.length}\n`);

    // Display each decoded call
    decodedCalls.forEach((call, index) => {
      console.log(`Call ${index + 1}:`);
      console.log(`  Target: ${call.target}`);
      console.log(`  Function: ${call.functionSignature}`);
      console.log(`  Function Name: ${call.functionName}`);
      console.log(`  Number of Arguments: ${call.args.length}`);
      if (call.args.length > 0) {
        console.log(`  Arguments:`);
        call.args.forEach((arg, argIndex) => {
          const argStr = typeof arg === 'bigint' ? arg.toString() : JSON.stringify(arg);
          console.log(`    [${argIndex}]: ${argStr.length > 100 ? argStr.substring(0, 100) + '...' : argStr}`);
        });
      }
      console.log(`  Raw Call Data: ${call.rawCallData.substring(0, 50)}...`);
      console.log();

      // Basic assertions for each call
      expect(call.target).toBeDefined();
      expect(call.functionName).toBeDefined();
      expect(call.functionSignature).toBeDefined();
      expect(call.rawCallData).toBeDefined();
    });

    console.log('=== Test Completed Successfully ===\n');
  }, 30000); // 30 second timeout

  it('should parse multicall data format', () => {
    const decoder = new MulticallDecoder();

    const multicallData = '0x82ad56cb00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000039053d51b77dc0d36036fc1fcc8cb819df8ef37a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000084c978f7ac0000000000000000000000000298e0c16097c3c2c3fc200f901ae54ae7659f9900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000beac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeebeac00000000000000000000000000000000000000000000000000000000000000000000000000000000039053d51b77dc0d36036fc1fcc8cb819df8ef37a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000084c978f7ac0000000000000000000000000298e0c16097c3c2c3fc200f901ae54ae7659f9900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000beac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeebeac00000000000000000000000000000000000000000000000000000000000000000000000000000000039053d51b77dc0d36036fc1fcc8cb819df8ef37a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000084c978f7ac0000000000000000000000000298e0c16097c3c2c3fc200f901ae54ae7659f9900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000beac0eeeeeeeeeeeeeeeeeeeeeeeeeeeeeebeac00000000000000000000000000000000000000000000000000000000000000000000000000000000039053d51b77dc0d36036fc1fcc8cb819df8ef37a00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002465da12640000000000000000000000000298e0c16097c3c2c3fc200f901ae54ae7659f9900000000000000000000000000000000000000000000000000000000';

    const calls = decoder.parseMulticallData(multicallData);

    expect(calls).toBeDefined();
    expect(Array.isArray(calls)).toBe(true);
    expect(calls.length).toBe(4);

    calls.forEach((call) => {
      expect(call.target).toBeDefined();
      expect(call.callData).toBeDefined();
      expect(call.callData.startsWith('0x')).toBe(true);
    });

    console.log(`\nParsed ${calls.length} calls from multicall data`);
    calls.forEach((call, i) => {
      console.log(`Call ${i + 1}: target=${call.target}, selector=${call.callData.substring(0, 10)}`);
    });
  });
});
